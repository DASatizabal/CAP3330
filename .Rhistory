college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
t.test(college_salary, alternative= c("less"), mu= 36)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
t.test(college_salary, alternative= c("less"), mu= 45000)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
t.test(college_salary, alternative= c("greater"), mu= 45000)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
t.test(college_salary, alternative= c("greater"), mu= 45000)
t.test(college_salary, alternative= c("less"), mu= 45000)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
sd(college_salary)
t.test(college_salary, alternative= c("greater"), mu= 45000)
t.test(college_salary, alternative= c("less"), mu= 45000)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
sd(college_salary)
(mean(college_salary)-45000)/(sd(college_salary)/sqrt(36))
t.test(college_salary, alternative= c("greater"), mu= 45000)
t.test(college_salary, alternative= c("less"), mu= 45000)
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
mean(college_salary)
sd(college_salary)
(mean(college_salary)-45000)/(sd(college_salary)/sqrt(36))
t.test(college_salary, alternative= c("greater"), mu= 45000)
t.test(college_salary, alternative= c("less"), mu= 45000)
t.test(college_salary, alternative= c("two.sided"), mu= 45000)
'Question 1 (40 points)
According to the National Association of Colleges and Employers, the average salary for a new college graduate in 2019 was $45,000. A small academic program wants to know if the average salary of its graduates is below the national mean value in 2019. If it is below the national mean value, they want to take measures to increase the starting salary of their graduates. The starting salary of 36 recent graduates of this program is stored in an R vector called “college_salary”. Copy the following text, paste it in an R studio code chunk, and run the code chunk. Afterward, you will have the vector available in your R project.
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
a) (25 points) Conduct the corresponding hypothesis test. Report the following as part of your answer:
The hypotheses (Ho and Ha).
The P value.
Your conclusion.
b) (10 points) Show the computations needed to get the value of the test statistic that you obtained in the R output from part a. In other words, you need to show how that value was obtained.
c) (5 points) What type of statistical error could you potentially be making after your decision in part a? Justify.
'demo)''
demo()
#Question 1 (40 points)
#According to the National Association of Colleges and Employers, the average salary for a new college graduate in 2019 was $45,000. A small academic program wants to know if the average salary of its graduates is below the national mean value in 2019. If it is below the national mean value, they want to take measures to increase the starting salary of their graduates. The starting salary of 36 recent graduates of this program is stored in an R vector called “college_salary”. Copy the following text, paste it in an R studio code chunk, and run the code chunk. Afterward, you will have the vector available in your R project.
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
a) (25 points) Conduct the corresponding hypothesis test. Report the following as part of your answer:
According to the National Association of Colleges and Employers, the average salary for a new college graduate in 2019 was $45,000. A small academic program wants to know if the average salary of its graduates is below the national mean value in 2019. If it is below the national mean value, they want to take measures to increase the starting salary of their graduates. The starting salary of 36 recent graduates of this program is stored in an R vector called “college_salary”. Copy the following text, paste it in an R studio code chunk, and run the code chunk. Afterward, you will have the vector available in your R project.
#According to the National Association of Colleges and Employers, the average salary for a new college graduate in 2019 was $45,000. A small academic program wants to know if the average salary of its graduates is below the national mean value in 2019. If it is below the national mean value, they want to take measures to increase the starting salary of their graduates. The starting salary of 36 recent graduates of this program is stored in an R vector called “college_salary”. Copy the following text, paste it in an R studio code chunk, and run the code chunk. Afterward, you will have the vector available in your R project.
# According to the National Association of Colleges and Employers, the average salary for a new college graduate in 2019 was $45,000. A small academic program wants to know if the average salary of its graduates is below the national mean value in 2019. If it is below the national mean value, they want to take measures to increase the starting salary of their graduates. The starting salary of 36 recent graduates of this program is stored in an R vector called “college_salary”. Copy the following text, paste it in an R studio code chunk, and run the code chunk. Afterward, you will have the vector available in your R project.
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
# a) (25 points) Conduct the corresponding hypothesis test. Report the following as part of your answer:
# The hypotheses (Ho and Ha).
# The P value.
# Your conclusion.
# Null Hypothesis (H₀): The mean salary of the program's graduates is equal to or greater than the national average salary.
# H0: μ = 45000
# Alternative Hypothesis (Hₐ): The mean salary of the program's graduates is less than the national average salary.
# Ha: μ < 45000
college_salary= c (45600, 51400, 35600, 42892, 48180, 51000, 39900, 40000, 48100, 42033 ,41072, 42898, 42010, 51200, 43260, 42901, 40296, 44350, 43200, 47512, 45590, 50050, 41110, 42194, 44643, 43600, 40600, 50961, 39254, 42400, 52000, 46100, 50533, 42026, 41236, 44239)
t.test(college_salary, alternative= c("less"), mu= 45000)
#sample mean
sampleMean = mean(college_sallary)
#sample mean
sampleMean = mean(college_salary)
#population mean given as $45,000
popMean = 45000
#sample standard Deviation
sampleSD = sd(college_salary)
# of samples
sample_count = length(college_salary)
#t-value
tvalue = ((sampleMean / popMean)/(sampleSD/(sqrt(Sample_count))))
#sample mean
sampleMean = mean(college_salary)
#population mean given as $45,000
popMean = 45000
#sample standard Deviation
sampleSD = sd(college_salary)
# of samples
sample_count = length(college_salary)
#t-value
tvalue = ((sampleMean / popMean)/(sampleSD/(sqrt(sample_coun))))
#sample mean
sampleMean = mean(college_salary)
#population mean given as $45,000
popMean = 45000
#sample standard Deviation
sampleSD = sd(college_salary)
# of samples
sample_count = length(college_salary)
#t-value
tvalue = ((sampleMean / popMean)/(sampleSD/(sqrt(sample_count))))
print(tvalue)
#sample mean
sampleMean = mean(college_salary)
#population mean given as $45,000
popMean = 45000
#sample standard Deviation
sampleSD = sd(college_salary)
# of samples
sample_count = length(college_salary)
#t-value
tvalue = ((sampleMean - popMean)/(sampleSD/(sqrt(sample_count))))
print(tvalue)
puma_labor= c(56, 51, 62, 58, 59, 59, 56, 56, 54, 47, 51, 64, 48, 59, 59, 53, 61, 55, 57, 63, 55, 56, 62, 57, 55)
#Sample Mean
q2SampleMean = mean(puma_labor)
extremeValue = puma_labor[which.max(abs(puma_labor - q2SampleMean))]
print(extreme_value)
#Sample Mean
q2SampleMean = mean(puma_labor)
extremeValue = puma_labor[which.max(abs(puma_labor - q2SampleMean))]
print(extremevalue)
#Sample Mean
q2SampleMean = mean(puma_labor)
extremeValue = puma_labor[which.max(abs(puma_labor - q2SampleMean))]
print(extremeValue)
#Sample Mean
q2SampleMean = mean(puma_labor)
#find extreme value of sample
extremeValue = puma_labor[which.max(abs(puma_labor - q2SampleMean))]
print(extremeValue)
#find the Standard Deviation of the sample
q2sampleSD = sd(puma_labor)
#calculate sd from sample average
numSDofX = (extremeValue - q2SampleMean) / q2sampleSD
numSDofX
t.test(college_salary, alternative= c("less"), mu= 45000)
t.test(puma_labor, alternative= c("less"), mu= 45000)
t.test(puma_labor, alternative= c("less"), mu= 60)
q2TestResult = t.test(college_salary, alternative= c("less"), mu= 45000)
q2TestResult
q2TestResult = t.test(puma_labor, alternative= c("less"), mu= 60)
q2TestResult
t.test(puma_labor, alternative= c("less"), mu= 60)
q2TestResult = t.test(puma_labor, alternative= c("less"), mu= 60)
q2TestResult
pValue = qTestResult$p.value
pValue = q2TestResult$p.value
pValue
q2TestResult = t.test(puma_labor, alternative= c("less"), mu= 60)
#q2TestResult
q2TestResult = t.test(puma_labor, alternative= c("less"), mu= 60)
q2TestResult
pValue = q2TestResult$p.value
pValue
q21TestResult = t.test(puma_labor, alternative= c("less"), mu= 61)
q21TestResult
